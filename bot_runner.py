from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, BotCommand 
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    filters,
    ContextTypes
)
import asyncio

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥, –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ AI
from config import *
from db_manager import (
    init_db,
    check_and_increment_limit,
    save_message,
    is_user_subscribed,
    activate_subscription,
    increase_limit,
    clear_user_history,
    get_user_status,
    create_payment_intent,
    verify_and_consume_payment
)
from ai_service import generate_ai_response


# ========================== –°–ï–†–í–ò–°–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========================

async def set_bot_commands(application):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –¥–ª—è –±–æ—Ç–∞."""
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"),
        BotCommand("mysubsc", "–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏ –ª–∏–º–∏—Ç—ã"),
        BotCommand("subscribe", "üëë–ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ 30 –¥–Ω–µ–π"), 
        BotCommand("buy_messages", "üéÅ–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"), 
        BotCommand("reset", "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"),
    ]
    await application.bot.set_my_commands(commands)
    print("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


# ========================== –ü–õ–ê–¢–ï–ñ–ò –ò –ò–ù–í–û–ô–°–´ ==========================

async def pre_checkout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂."""
    query = update.pre_checkout_query
    await query.answer(ok=True)


async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ–∫–µ–Ω–∞."""
    user_id = update.message.from_user.id
    payment_token = update.message.successful_payment.invoice_payload
    
    # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂
    valid, payment_data = verify_and_consume_payment(payment_token, user_id)
    
    if not valid:
        print(f"‚ö†Ô∏è SECURITY ALERT: Invalid payment attempt by user {user_id}, token: {payment_token}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
    if payment_data['payment_type'] == 'subscription':
        activate_subscription(user_id, duration_days=30)
        await update.message.reply_text(SUCCESS_PAYMENT_MESSAGE)
    
    elif payment_data['payment_type'] == 'messages':
        count = payment_data['package_details']['count']
        increase_limit(user_id, count_to_add=count)
        await update.message.reply_text(
            f"‚úÖ **–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!** –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π.",
            parse_mode='Markdown'
        )
    
    print(f"‚úÖ Valid payment processed for user {user_id}: {payment_data}")


async def send_subscription_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º payload."""
    user_id = update.effective_user.id
    
    # ‚úÖ –°–æ–∑–¥–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    payment_token = create_payment_intent(
        user_id=user_id,
        payment_type='subscription',
        amount=SUBSCRIPTION_PRICE_STARS
    )
    
    title = "üëë –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π"
    description = "–ü–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –ê–ª–∏–Ω–æ–π –Ω–∞ 30 –¥–Ω–µ–π."
    
    await context.bot.send_invoice(
        chat_id=user_id,
        title=title,
        description=description,
        payload=payment_token,  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–æ–∫–µ–Ω
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="XTR",
        prices=[LabeledPrice("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π", SUBSCRIPTION_PRICE_STARS)],  # ‚úÖ –ë–ï–ó —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ 100
        start_parameter='monthly_sub',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å –∑–∞ {SUBSCRIPTION_PRICE_STARS} ‚≠ê", pay=True)]
        ])
    )


async def _send_message_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE, count: int, price: int, payload_key: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º payload."""
    user_id = update.effective_user.id
    
    # ‚úÖ –°–æ–∑–¥–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    payment_token = create_payment_intent(
        user_id=user_id,
        payment_type='messages',
        amount=price,
        package_details={'count': count}
    )
    
    title = f"üéÅ –†–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ {count} —Å–æ–æ–±—â–µ–Ω–∏–π"
    description = f"–ü–æ–ª—É—á–∏—Ç–µ {count} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ê–ª–∏–Ω—ã. –î–µ–π—Å—Ç–≤—É–µ—Ç –±–µ—Å—Å—Ä–æ—á–Ω–æ."

    await context.bot.send_invoice(
        chat_id=user_id,
        title=title,
        description=description,
        payload=payment_token,  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–æ–∫–µ–Ω
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="XTR", 
        prices=[LabeledPrice(f"–°–æ–æ–±—â–µ–Ω–∏—è ({count})", price)],  # ‚úÖ –ë–ï–ó —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ 100
        start_parameter=payload_key.replace('_', '-'), 
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å –∑–∞ {price} ‚≠ê", pay=True)]
        ])
    )


# ========================== –ù–ê–í–ò–ì–ê–¶–ò–Ø ==========================

async def show_subscription_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–ö—É–ø–∏—Ç—å" –∏ "–ù–∞–∑–∞–¥".
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ —á–∞—Ç–µ, —Ç–∞–∫ –∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /subscribe."""
    
    message_text = (
        f"üëë **–ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π** \n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: **{SUBSCRIPTION_PRICE_STARS} ‚≠ê**\n\n"
        f"‚úÖ **–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ:** –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–∫–æ–ª—å–∫–æ –∑–∞—Ö–æ—Ç–∏—Ç–µ.\n"
        f"‚úÖ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏:** –í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ.\n"
        f"‚úÖ **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è:** –í—ã –ø–æ–º–æ–≥–∞–µ—Ç–µ –ø—Ä–æ–µ–∫—Ç—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ!\n"
    )
    
    keyboard = [
        [InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç –∑–∞ {SUBSCRIPTION_PRICE_STARS} ‚≠ê", callback_data="final_buy_subscription")], 
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç—É—Å—É", callback_data="back_to_status")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message:
        await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            message_text, 
            reply_markup=reply_markup, 
            parse_mode='Markdown'
        )


async def show_message_packages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –ø–∞–∫–µ—Ç–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–æ—Ç–≤–µ—Ç –Ω–∞ /buy_messages –∏–ª–∏ –∫–Ω–æ–ø–∫—É)."""
    
    keyboard = []
    
    # –°–±–æ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑ MESSAGE_PACKAGES
    for key, package in MESSAGE_PACKAGES.items():
        button_text = f"üéÅ {package['count']} —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî {package['price']} ‚≠ê"
        callback_data = f"buy_msg_{key}" 
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç—É—Å—É", callback_data="back_to_status")])
        
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = (
        "üåü **–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏:**\n\n"
        "–ö—É–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—É–º–º–∏—Ä—É—é—Ç—Å—è —Å –í–∞—à–∏–º –¥–Ω–µ–≤–Ω—ã–º –ª–∏–º–∏—Ç–æ–º –∏ –¥–µ–π—Å—Ç–≤—É—é—Ç –±–µ—Å—Å—Ä–æ—á–Ω–æ."
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message:
        await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            message_text, 
            reply_markup=reply_markup, 
            parse_mode='Markdown'
        )


# ========================== –•–ï–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î ==========================

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–∞–º—è—Ç—å) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.message.from_user.id
    clear_user_history(user_id)
    await update.message.reply_text("üß† –ü–∞–º—è—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞! –ù–∞—á–Ω–µ–º –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.")


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ /start –∏–ª–∏ –∫–Ω–æ–ø–∫–µ '–ù–∞–∑–∞–¥'."""
    
    source = None
    user_id = None

    if update.message:
        user_id = update.message.from_user.id
        source = update.message
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
        source = update.callback_query
    else:
        return
    
    # --- 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å ---
    days_left, messages_left = get_user_status(user_id) 

    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–∏–Ω–∞ –∏ —è –∑–¥–µ—Å—å –¥–ª—è —Ç–µ–±—è! üíï\n"
        "–ü–æ–¥–¥–µ—Ä–∂—É, —É—Ç–µ—à—É, –∞ –º–æ–≥—É –∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–±–æ–ª—Ç–∞—Ç—å üòä\n\n"
    )

    if days_left is not None and days_left > 0:
        status_text = (
            f"‚úÖ **–£ –í–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ (30 –¥–Ω–µ–π)!**\n"
            f"–î–æ –∫–æ–Ω—Ü–∞ –æ—Å—Ç–∞–ª–æ—Å—å: **{days_left}** –¥–Ω–µ–π.\n"
            f"–õ–∏–º–∏—Ç: **–ë–µ–∑–ª–∏–º–∏—Ç**."
        )
    else:
        status_text = (
            f"üÜì **–í–∞—à –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç:** {messages_left}/{DAILY_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
            f"–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ, –í—ã –º–æ–∂–µ—Ç–µ:\n"
        )
    
    # --- 2. –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ---
    keyboard = [
        [InlineKeyboardButton(f"‚≠ê –ö—É–ø–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç ({SUBSCRIPTION_PRICE_STARS} ‚≠ê/30 –¥–Ω–µ–π)", callback_data="show_sub_details")],
        
        [InlineKeyboardButton(
            f"üéÅ –ö—É–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {SMALLEST_PACKAGE_PRICE} ‚≠ê", 
            callback_data="show_message_packages_menu"
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # --- 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    if source is update.message:
        await source.reply_text(
            welcome_message + status_text, 
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    elif source is update.callback_query:
        await source.edit_message_text(
            welcome_message + status_text, 
            reply_markup=reply_markup, 
            parse_mode='Markdown'
        )


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ–¥–ø–∏—Å–∫–∞ / —Ä–∞–∑–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ / –Ω–∞–≤–∏–≥–∞—Ü–∏—è)."""
    query = update.callback_query
    await query.answer()
    
    data = query.data

    # –ù–ê–í–ò–ì–ê–¶–ò–Ø (–ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥)
    if data == 'back_to_status':
        await start_command(update, context) 
        return

    # –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø
    elif data == 'show_sub_details':
        await show_subscription_details(update, context)
        
    elif data == 'show_message_packages_menu':
        await show_message_packages(update, context) 

    # –ü–û–ö–£–ü–ö–ê –ü–û–î–ü–ò–°–ö–ò (–§–ò–ù–ê–õ–¨–ù–´–ô –®–ê–ì)
    elif data == 'final_buy_subscription': 
        await send_subscription_invoice(update, context)
        
    # –ü–û–ö–£–ü–ö–ê –ü–ê–ö–ï–¢–ê –°–û–û–ë–©–ï–ù–ò–ô (–§–ò–ù–ê–õ–¨–ù–´–ô –®–ê–ì)
    elif data.startswith('buy_msg_'):
        package_key = data[8:] 
        package = MESSAGE_PACKAGES.get(package_key)
        
        if package:
            payload_key = f"messages_{package['count']}_stars_{package['price']}"
            
            await _send_message_invoice(
                update, 
                context, 
                count=package['count'], 
                price=package['price'], 
                payload_key=payload_key
            )
        else:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.", reply_markup=None)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    user_id = update.message.from_user.id
    user_message = update.message.text
    user_display_name = update.message.from_user.first_name

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ª–∏–º–∏—Ç–∞
    if not is_user_subscribed(user_id) and not check_and_increment_limit(user_id, DAILY_LIMIT):
        keyboard = [
            [InlineKeyboardButton(f"‚≠ê –ö—É–ø–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç ({SUBSCRIPTION_PRICE_STARS} ‚≠ê/30 –¥–Ω–µ–π)", callback_data="show_sub_details")],
            [InlineKeyboardButton(
                f"üéÅ –ö—É–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {SMALLEST_PACKAGE_PRICE} ‚≠ê", 
                callback_data="show_message_packages_menu"
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            LIMIT_EXCEEDED_MESSAGE, 
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    # 2. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id,
        action="typing"
    )
    
    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_message(user_id, "user", user_message)

    # 4. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    try:
        ai_response = generate_ai_response(user_id, user_message, user_display_name)
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ AI –¥–ª—è user {user_id}: {e}")
        ai_response = "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–µ–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±–æ–π üíî –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ."

    # 5. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
    typing_time = len(ai_response) / 80  # 80 —Å–∏–º–≤–æ–ª–æ–≤/—Å–µ–∫
    typing_time = min(typing_time, 4)  # –ú–∞–∫—Å–∏–º—É–º 4 —Å–µ–∫—É–Ω–¥—ã
    typing_time = max(typing_time, 0.5)  # –ú–∏–Ω–∏–º—É–º 0.5 —Å–µ–∫—É–Ω–¥—ã
    
    await asyncio.sleep(typing_time)

    # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await update.message.reply_text(ai_response)
    save_message(user_id, "assistant", ai_response)


# ========================== MAIN ==========================

def main():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞."""
    init_db()

    application = Application.builder().token(TOKEN_TG).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("mysubsc", start_command))
    application.add_handler(CommandHandler("subscribe", show_subscription_details)) 
    application.add_handler(CommandHandler("buy_messages", show_message_packages))
    application.add_handler(CommandHandler("reset", reset_command))
    
    # –°–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Callback –∏ –ø–ª–∞—Ç–µ–∂–∏
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(PreCheckoutQueryHandler(pre_checkout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    
    print("üöÄ AIGirl bot is running...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
    async def post_init(app):
        try:
            await set_bot_commands(app)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é: {e}")
            print("–ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥")
    
    application.post_init = post_init
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()